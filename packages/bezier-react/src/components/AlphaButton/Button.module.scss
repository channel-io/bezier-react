.Button {
  position: relative;
  box-sizing: border-box;

  /* dimension */
  &:where(.size-xs) {
    height: 20px;
    padding: 0 4px;

    :where(.ButtonContent) {
      gap: 3px;
    }
  }

  &:where(.size-s) {
    height: 24px;
    padding: 0 6px;

    :where(.ButtonContent) {
      gap: 3px;
    }
  }

  &:where(.size-m) {
    height: 36px;
    padding: 0 10px;

    :where(.ButtonContent) {
      gap: 4px;
    }
  }

  &:where(.size-l) {
    height: 44px;
    padding: 0 14px;

    :where(.ButtonContent) {
      gap: 6px;
    }
  }

  &:where(.size-xl) {
    height: 54px;
    padding: 0 18px;

    :where(.ButtonContent) {
      gap: 6px;
    }
  }

  /*  background-color */
  &:where(.variant-primary) {
    $background-color-by-color: (
      blue: var(--alpha-color-primary-bg-normal),
      cobalt: var(--alpha-color-accent-bg-normal),
      red: var(--alpha-color-critical-bg-normal),
      orange: var(--alpha-color-warning-bg-normal),
      green: var(--alpha-color-success-bg-normal),
      pink: var(--alpha-color-bg-pink-normal),
      purple: var(--alpha-color-bg-purple-normal),
      dark-grey: var(--alpha-color-bg-grey-darkest),
      light-grey: var(--alpha-color-bg-black-dark),
    );

    @each $color, $background-color in $background-color-by-color {
      &:where(.color-#{$color}) {
        background-color: $background-color;
      }
    }
  }

  &:where(.variant-secondary) {
    $background-color-by-color: (
      blue: var(--alpha-color-primary-bg-lightest),
      cobalt: var(--alpha-color-accent-bg-lightest),
      red: var(--alpha-color-critical-bg-lightest),
      orange: var(--alpha-color-warning-bg-lightest),
      green: var(--alpha-color-success-bg-lightest),
      pink: var(--alpha-color-bg-pink-lightest),
      purple: var(--alpha-color-bg-purple-lightest),
      dark-grey: var(--alpha-color-bg-grey-lighter),
      light-grey: var(--alpha-color-bg-black-lighter),
    );

    @each $color, $background-color in $background-color-by-color {
      &:where(.color-#{$color}) {
        background-color: $background-color;
      }
    }
  }

  &:where(.variant-tertiary, .variant-floating) {
    background-color: initial;
  }

  &:where(.variant-tertiary):where(.color-white) {
    background-color: initial;
  }

  /* border-radius */
  &:where(.variant-primary, .variant-secondary, .variant-tertiary) {
    $border-radius-by-size: (
      xs: var(--alpha-dimension-6),
      s: var(--alpha-dimension-7),
      m: var(--alpha-dimension-10),
      l: var(--alpha-dimension-12),
      xl: var(--alpha-dimension-14),
    );

    @each $size, $border-radius in $border-radius-by-size {
      &:where(.size-#{$size}) {
        border-radius: $border-radius;
      }
    }
  }

  /* color */
  &:where(.variant-primary) {
    &:where(:not(.color-dark-grey), :not(.color-light-grey)) {
      color: var(--alpha-color-fg-absolute-white-dark);
    }

    &:where(.color-dark-grey) {
      color: var(--alpha-color-fg-white-normal);
    }

    &:where(.color-light-grey) {
      color: var(--alpha-color-fg-absolute-white-normal);
    }
  }

  &:where(.variant-secondary, .variant-tertiary) {
    $text-color-map: (
      blue: var(--alpha-color-primary-fg-normal),
      cobalt: var(--alpha-color-accent-fg-normal),
      red: var(--alpha-color-critical-fg-normal),
      orange: var(--alpha-color-warning-fg-normal),
      green: var(--alpha-color-success-fg-normal),
      pink: var(--alpha-color-fg-pink-normal),
      purple: var(--alpha-color-fg-purple-normal),
      dark-grey: var(--alpha-color-fg-black-darkest),
      light-grey: var(--alpha-color-fg-black-darker),
    );

    @each $button-color, $text-color in $text-color-map {
      &:where(.color-#{$button-color}) :where(.ButtonText) {
        color: $text-color;
      }
    }

    $icon-color-map: (
      blue: var(--alpha-color-primary-fg-normal),
      cobalt: var(--alpha-color-accent-fg-normal),
      red: var(--alpha-color-critical-fg-normal),
      orange: var(--alpha-color-warning-fg-normal),
      green: var(--alpha-color-success-fg-normal),
      pink: var(--alpha-color-fg-pink-normal),
      purple: var(--alpha-color-fg-purple-normal),
      dark-grey: var(--alpha-color-fg-black-darker),
      light-grey: var(--alpha-color-fg-black-dark),
    );

    @each $button-color, $icon-color in $icon-color-map {
      &:where(.color-#{$button-color}) :where(.ButtonIcon) {
        color: $icon-color;
      }
    }
  }

  &:where(.variant-tertiary) {
    &:where(.color-white) {
      :where(.ButtonIcon) {
        color: var(--alpha-color-fg-absolute-white-light);
      }

      :where(.ButtonText) {
        color: var(--alpha-color-fg-absolute-white-normal);
      }
    }
  }

  &:disabled {
    cursor: not-allowed;
    opacity: var(--alpha-opacity-disabled);
  }

  .ButtonContent {
    display: flex;
    align-items: center;
    justify-content: center;

    &:where(.loading) {
      visibility: hidden;
    }
  }

  .ButtonLoader {
    position: absolute;
    inset: 0;

    display: flex;
    align-items: center;
    justify-content: center;
  }
}
