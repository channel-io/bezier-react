@use '../../styles/mixins/dimension';

@import '../Icon/Icon.module';

$chromatic-colors: 'blue', 'red', 'green', 'cobalt', 'orange', 'pink', 'purple';

.FloatingButton {
  $background-color-map: (
    blue: --alpha-color-primary-bg-normal,
    cobalt: --alpha-color-accent-bg-normal,
    red: --alpha-color-critical-bg-normal,
    orange: --alpha-color-warning-bg-normal,
    green: --alpha-color-success-bg-normal,
    pink: --alpha-color-bg-pink-normal,
    purple: --alpha-color-bg-purple-normal,
    dark-grey: --alpha-color-bg-grey-darkest,
    light-grey: --alpha-color-bg-grey-dark,
  );
  $color-map: (
    blue: --alpha-color-primary-fg-normal,
    cobalt: --alpha-color-accent-fg-normal,
    red: --alpha-color-critical-fg-normal,
    orange: --alpha-color-warning-fg-normal,
    green: --alpha-color-success-fg-normal,
    pink: --alpha-color-fg-pink-normal,
    purple: --alpha-color-fg-purple-normal,
    dark-grey: --alpha-color-fg-black-darkest,
    light-grey: --alpha-color-fg-black-darker,
  );
  $hovered-color-map: (
    blue: --alpha-color-primary-fg-dark,
    cobalt: --alpha-color-accent-fg-dark,
    red: --alpha-color-critical-fg-dark,
    orange: --alpha-color-warning-fg-dark,
    green: --alpha-color-success-fg-dark,
    pink: --alpha-color-fg-pink-dark,
    purple: --alpha-color-fg-purple-dark,
    dark-grey: --alpha-color-fg-black-darkest,
    light-grey: --alpha-color-fg-black-darkest,
  );
  $icon-color-map: (
    dark-grey: --alpha-color-fg-black-darker,
    light-grey: --alpha-color-fg-black-dark,
  );

  position: relative;

  box-sizing: border-box;

  border-radius: 999px;
  box-shadow: var(--alpha-shadow-2);

  transition: background-color var(--transition-s);

  /* dimension */
  &:where(.size-xs) {
    height: 20px;
    padding: 0 6px;

    & :where(.ButtonText) {
      padding: 0 3px;
    }
  }

  &:where(.size-s) {
    height: 24px;
    padding: 0 8px;

    & :where(.ButtonText) {
      padding: 0 4px;
    }
  }

  &:where(.size-m) {
    height: 36px;
    padding: 0 12px;

    & :where(.ButtonText) {
      padding: 0 4px;
    }
  }

  &:where(.size-l) {
    height: 44px;
    padding: 0 14px;

    & :where(.ButtonText) {
      padding: 0 6px;
    }
  }

  &:where(.size-xl) {
    height: 54px;
    padding: 0 18px;

    & :where(.ButtonText) {
      padding: 0 6px;
    }
  }

  /* background-color */
  &:where(.variant-primary) {
    @each $button-color, $background-color in $background-color-map {
      &:where(.color-#{'' + $button-color}) {
        background-color: var(#{$background-color});
      }
    }
  }

  &:where(.variant-secondary) {
    background-color: var(--alpha-color-bg-white-higher);
  }

  /* color */
  /* stylelint-disable-next-line no-duplicate-selectors */
  &:where(.variant-primary) {
    color: var(--alpha-color-fg-absolute-white-dark);

    &:where(.color-dark-grey) {
      color: var(--alpha-color-fg-white-normal);
    }
  }

  /* stylelint-disable-next-line no-duplicate-selectors */
  &:where(.variant-secondary) {
    @each $button-color, $color in $color-map {
      &:where(.color-#{'' + $button-color}) {
        color: var(#{$color});
      }
    }

    @each $button-color, $icon-color in $icon-color-map {
      &:where(.color-#{'' + $button-color}) {
        & :is(.ButtonIcon) {
          color: var(#{$icon-color});
        }
      }
    }
  }

  /* visual effect on interaction */
  &:where(.active, :hover):where(:not(:disabled)) {
    box-shadow: var(--alpha-shadow-3);

    @each $button-color, $background-color in $background-color-map {
      &:where(.variant-primary.color-#{'' + $button-color}) {
        background-color: var(#{$background-color}-hovered);
      }
    }

    @each $button-color, $color in $hovered-color-map {
      &:where(.variant-secondary.color-#{'' + $button-color}) {
        color: var(#{$color});

        & :is(.ButtonIcon) {
          color: var(#{$color});
        }
      }
    }
  }

  &:where(.variant-primary.color-blue:focus-visible) {
    outline: 3px solid var(--bgtxt-blue-light);
  }

  &:disabled {
    cursor: not-allowed;
    opacity: var(--alpha-opacity-disabled);
  }

  /* internal components */
  & :where(.ButtonContent) {
    display: flex;
    align-items: center;
    justify-content: center;

    &:where(.loading) {
      visibility: hidden;
    }
  }

  & :where(.ButtonLoader) {
    position: absolute;
    inset: 0;

    display: flex;
    align-items: center;
    justify-content: center;

    @each $size, $value in $size-map {
      &:where(.size-#{$size}) {
        & :is(.Loader) {
          @include dimension.square(#{$value}px);
        }
      }
    }
  }
}
