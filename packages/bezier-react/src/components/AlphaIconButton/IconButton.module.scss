@use '../../styles/mixins/dimension';

@import '../Icon/Icon.module';

$chromatic-colors: 'blue', 'red', 'green', 'cobalt', 'orange', 'pink', 'purple';

.IconButton {
  position: relative;
  box-sizing: border-box;
  transition: background-color var(--transition-s);

  /* dimension */
  &:where(.size-xs) {
    @include dimension.square(20px);

    padding: 4px;
  }

  &:where(.size-s) {
    @include dimension.square(24px);

    padding: 4px;
  }

  &:where(.size-m) {
    @include dimension.square(36px);

    padding: 8px;
  }

  &:where(.size-l) {
    @include dimension.square(44px);

    padding: 12px;
  }

  &:where(.size-xl) {
    @include dimension.square(54px);

    padding: 15px;
  }

  /* background-color */
  &:where(.variant-primary) {
    $background-color-by-color: (
      blue: var(--alpha-color-primary-bg-normal),
      cobalt: var(--alpha-color-accent-bg-normal),
      red: var(--alpha-color-critical-bg-normal),
      orange: var(--alpha-color-warning-bg-normal),
      green: var(--alpha-color-success-bg-normal),
      pink: var(--alpha-color-bg-pink-normal),
      purple: var(--alpha-color-bg-purple-normal),
      dark-grey: var(--alpha-color-bg-grey-darkest),
      light-grey: var(--alpha-color-bg-black-dark),
      white-absolute: var(--alpha-color-bg-absolute-white-dark),
    );

    @each $color, $background-color in $background-color-by-color {
      &:where(.color-#{'' + $color}) {
        background-color: $background-color;
      }
    }
  }

  &:where(.variant-secondary) {
    $background-color-by-color: (
      blue: var(--alpha-color-primary-bg-lightest),
      cobalt: var(--alpha-color-accent-bg-lightest),
      red: var(--alpha-color-critical-bg-lightest),
      orange: var(--alpha-color-warning-bg-lightest),
      green: var(--alpha-color-success-bg-lightest),
      pink: var(--alpha-color-bg-pink-lightest),
      purple: var(--alpha-color-bg-purple-lightest),
      dark-grey: var(--alpha-color-bg-black-lighter),
      light-grey: var(--alpha-color-bg-black-lighter),
      white-absolute: var(--alpha-color-bg-absolute-white-lightest),
    );

    @each $color, $background-color in $background-color-by-color {
      &:where(.color-#{'' + $color}) {
        background-color: $background-color;
      }
    }
  }

  &:where(.variant-tertiary) {
    @each $color in $chromatic-colors {
      &:where(.color-#{'' + $color}) {
        /* stylelint-disable-next-line bezier/validate-token */
        background-color: var(--alpha-color-bg-#{$color}-transparent);
      }
    }

    &:where(.color-dark-grey, .color-light-grey, .color-white-absolute) {
      background-color: var(--alpha-color-bg-white-white-alpha-transparent);
    }
  }

  /* color */
  /* stylelint-disable-next-line no-duplicate-selectors */
  &:where(.variant-primary) {
    color: var(--alpha-color-fg-absolute-white-dark);

    &:where(.color-dark-grey) {
      color: var(--alpha-color-fg-white-normal);
    }

    &:where(.color-light-grey) {
      color: var(--alpha-color-fg-absolute-white-normal);
    }

    &:where(.color-white-absolute) {
      color: var(--alpha-color-fg-absolute-black-normal);
    }
  }

  &:where(.variant-secondary, .variant-tertiary) {
    $color-map: (
      blue: var(--alpha-color-primary-fg-normal),
      cobalt: var(--alpha-color-accent-fg-normal),
      red: var(--alpha-color-critical-fg-normal),
      orange: var(--alpha-color-warning-fg-normal),
      green: var(--alpha-color-success-fg-normal),
      pink: var(--alpha-color-fg-pink-normal),
      purple: var(--alpha-color-fg-purple-normal),
      dark-grey: var(--alpha-color-fg-black-darkest),
      light-grey: var(--alpha-color-fg-black-darker),
    );

    @each $button-color, $color in $color-map {
      &:where(.color-#{'' + $button-color}) {
        color: $color;
      }
    }

    &:where(.color-dark-grey) {
      & :where(.ButtonIcon) {
        color: var(--alpha-color-fg-black-darker);
      }
    }

    &:where(.color-light-grey) {
      & :where(.ButtonIcon) {
        color: var(--alpha-color-fg-black-dark);
      }
    }
  }

  &:where(.variant-tertiary, .variant-secondary):where(.color-white-absolute) {
    & :where(.ButtonIcon) {
      color: var(--alpha-color-fg-absolute-white-normal);
    }
  }

  /* border-radius */
  &:where(.shape-rectangle) {
    $border-radius-by-size: (
      xs: var(--alpha-dimension-6),
      s: var(--alpha-dimension-7),
      m: var(--alpha-dimension-10),
      l: var(--alpha-dimension-12),
      xl: var(--alpha-dimension-14),
    );

    @each $size, $border-radius in $border-radius-by-size {
      &:where(.size-#{$size}) {
        border-radius: $border-radius;
      }
    }
  }

  &:where(.shape-circle) {
    border-radius: 9999px;
  }

  /* TODO: use v2 token when design is specified */

  /* visual effect on interaction */
  &:where(.active, :hover):where(:not(:disabled)) {
    &:where(.variant-primary) {
      @each $color in $chromatic-colors {
        &:where(.color-#{'' + $color}) {
          /* stylelint-disable-next-line bezier/validate-token */
          background-color: var(--bgtxt-#{$color}-dark);
        }
      }

      &:where(.color-dark-grey) {
        background-color: var(--bg-grey-darkest);
      }

      &:where(.color-light-grey) {
        background-color: var(--bg-black-darker);
      }
    }

    &:where(.variant-secondary) {
      @each $color in $chromatic-colors {
        &:where(.color-#{'' + $color}) {
          /* stylelint-disable-next-line bezier/validate-token */
          background-color: var(--bgtxt-#{$color}-lighter);
        }
      }

      &:where(.color-dark-grey, .color-light-grey) {
        background-color: var(--bg-black-light);
      }
    }

    &:where(.variant-tertiary) {
      @each $color in $chromatic-colors {
        &:where(.color-#{'' + $color}) {
          /* stylelint-disable-next-line bezier/validate-token */
          background-color: var(--bgtxt-#{$color}-lightest);
        }
      }

      &:where(.color-dark-grey, .color-light-grey, .color-white-absolute) {
        background-color: var(--bg-black-lighter);
      }
    }

    &:where(.color-dark-grey):where(.variant-secondary, .variant-tertiary) {
      & :is(.ButtonIcon, .ButtonLoader) {
        color: var(--txt-black-darkest);
      }
    }

    &:where(.color-light-grey):where(.variant-secondary, .variant-tertiary) {
      & :is(.ButtonIcon, .ButtonLoader) {
        color: var(--txt-black-darker);
      }
    }

    &:where(.color-white-absolute.variant-tertiary) {
      & :where(.ButtonIcon) {
        color: var(--alpha-color-fg-absolute-white-normal);
      }
    }
  }

  &:where(.variant-primary.color-blue:focus-visible) {
    outline: 3px solid var(--bgtxt-blue-light);
  }

  &:disabled {
    cursor: not-allowed;
    opacity: var(--alpha-opacity-disabled);
  }

  /* internal components */
  & :where(.ButtonContent) {
    display: flex;
    align-items: center;
    justify-content: center;

    &:where(.loading) {
      visibility: hidden;
    }
  }

  & :where(.ButtonLoader) {
    position: absolute;
    inset: 0;

    display: flex;
    align-items: center;
    justify-content: center;

    @each $size, $value in $size-map {
      &:where(.size-#{$size}) {
        & :is(.Loader) {
          @include dimension.square(#{$value}px);
        }
      }
    }
  }
}
