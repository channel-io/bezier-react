import {
  type BezierComponentProps,
  type LayoutProps,
  type MarginProps,
} from '~/src/types/ComponentProps'
import { TokenPrefix } from '~/src/types/Token'

import {
  cssDimension,
  cssVar,
  tokenCssVar,
} from './style'

export const splitByBezierComponentProps = <
  Props extends BezierComponentProps,
>({
    as,
    testId,
    style,
    className,
    interpolation,
    ...rest
  }: Props): [BezierComponentProps, Omit<Props, keyof BezierComponentProps>] => [
    {
      as,
      testId,
      style,
      className,
      interpolation,
    },
    rest,
  ]

export const splitByMarginProps = <Props extends MarginProps>({
  m,
  mx,
  my,
  mt,
  mr,
  mb,
  ml,
  ...rest
}: Props): [MarginProps, Omit<Props, keyof MarginProps>] => [
    {
      m,
      mx,
      my,
      mt,
      mr,
      mb,
      ml,
    },
    rest,
  ]

export const splitByLayoutProps = <Props extends LayoutProps>({
  p,
  px,
  py,
  pt,
  pr,
  pb,
  pl,
  width,
  height,
  maxWidth,
  minWidth,
  maxHeight,
  minHeight,
  position,
  inset,
  top,
  right,
  bottom,
  left,
  shrink,
  grow,
  bgColor,
  borderColor,
  borderRadius,
  borderWidth,
  borderTopWidth,
  borderRightWidth,
  borderBottomWidth,
  borderLeftWidth,
  borderStyle,
  elevation,
  zIndex,
  overflow,
  overflowX,
  overflowY,
  ...rest
}: Props): [LayoutProps, Omit<Props, keyof LayoutProps>] => [
    {
      p,
      px,
      py,
      pt,
      pr,
      pb,
      pl,
      width,
      height,
      maxWidth,
      minWidth,
      maxHeight,
      minHeight,
      position,
      inset,
      top,
      right,
      bottom,
      left,
      shrink,
      grow,
      bgColor,
      borderColor,
      borderRadius,
      borderWidth,
      borderTopWidth,
      borderRightWidth,
      borderBottomWidth,
      borderLeftWidth,
      borderStyle,
      elevation,
      zIndex,
      overflow,
      overflowX,
      overflowY,
    },
    rest,
  ]

export const getMarginStyle = <Props extends MarginProps>({
  m,
  mx,
  my,
  mt,
  mr,
  mb,
  ml,
}: Props) => ({
    '--b-margin-all': cssDimension(m),
    '--b-margin-x': cssDimension(mx),
    '--b-margin-y': cssDimension(my),
    '--b-margin-top': cssDimension(mt),
    '--b-margin-right': cssDimension(mr),
    '--b-margin-bottom': cssDimension(mb),
    '--b-margin-left': cssDimension(ml),
  })

export const getLayoutStyle = <Props extends LayoutProps>({
  p,
  px,
  py,
  pt,
  pr,
  pb,
  pl,
  width,
  height,
  maxWidth,
  minWidth,
  maxHeight,
  minHeight,
  position,
  inset,
  top,
  right,
  bottom,
  left,
  shrink,
  grow,
  bgColor,
  borderColor,
  borderRadius,
  borderWidth,
  borderTopWidth,
  borderRightWidth,
  borderBottomWidth,
  borderLeftWidth,
  borderStyle,
  elevation,
  zIndex,
  overflow,
  overflowX,
  overflowY,
}: Props) => ({
    '--b-padding-all': cssDimension(p),
    '--b-padding-x': cssDimension(px),
    '--b-padding-y': cssDimension(py),
    '--b-padding-top': cssDimension(pt),
    '--b-padding-right': cssDimension(pr),
    '--b-padding-bottom': cssDimension(pb),
    '--b-padding-left': cssDimension(pl),
    '--b-width': cssDimension(width),
    '--b-height': cssDimension(height),
    '--b-max-width': cssDimension(maxWidth),
    '--b-min-width': cssDimension(minWidth),
    '--b-max-height': cssDimension(maxHeight),
    '--b-min-height': cssDimension(minHeight),
    '--b-position': position,
    '--b-inset': cssDimension(inset),
    '--b-top': cssDimension(top),
    '--b-right': cssDimension(right),
    '--b-bottom': cssDimension(bottom),
    '--b-left': cssDimension(left),
    '--b-shrink': shrink,
    '--b-grow': grow,
    '--b-bg-color': cssVar(bgColor),
    '--b-border-color': cssVar(borderColor),
    '--b-border-radius': tokenCssVar(borderRadius && `${TokenPrefix.Radius}-${borderRadius}`),
    '--b-border-width': cssDimension(borderWidth),
    '--b-border-top-width': cssDimension(borderTopWidth),
    '--b-border-right-width': cssDimension(borderRightWidth),
    '--b-border-bottom-width': cssDimension(borderBottomWidth),
    '--b-border-left-width': cssDimension(borderLeftWidth),
    '--b-border-style': borderStyle,
    '--b-elevation': tokenCssVar(elevation && `${TokenPrefix.Elevation}-${elevation}`),
    '--b-z-index': tokenCssVar(zIndex && `${TokenPrefix.ZIndex}-${zIndex}`),
    '--b-overflow': overflow,
    '--b-overflow-x': overflowX,
    '--b-overflow-y': overflowY,
  })
